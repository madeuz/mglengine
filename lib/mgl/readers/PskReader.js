/* *  MglEngine - WebGL engine programming library *  Copyright (C) 2011  Mateusz Szczygielski * * This software is provided 'as-is', without any express or implied * warranty. In no event will the authors be held liable for any damages * arising from the use of this software. * * Permission is granted to anyone to use this software for any purpose, * including commercial applications, and to alter it and redistribute it * freely, subject to the following restrictions: * *    1. The origin of this software must not be misrepresented; you must not *    claim that you wrote the original software. If you use this software *    in a product, an acknowledgment in the product documentation would be *    appreciated but is not required. * *    2. Altered source versions must be plainly marked as such, and must not *    be misrepresented as being the original software. * *    3. This notice may not be removed or altered from any source *    distribution. *//** * @class mgl.PskReader * Unreal PSK reader class * @constructor * @param {String} data PSK file data */mgl.PskReader = function(data){	var view = new mgl.DataView(data);		var chunkID = view.getString(20);	chunkID = chunkID.substring(0, chunkID.indexOf('\0'));	var typeFlag = view.getInt32();	var dataSize = view.getInt32();	var dataCount = view.getInt32();		if(typeFlag > 1999801){		mgl.Console.error('File type not supported!')		return;	}		chunkID = view.getString(20);	chunkID = chunkID.substring(0, chunkID.indexOf('\0'));	typeFlag = view.getInt32();	dataSize = view.getInt32();	dataCount = view.getInt32();		var vPointArray = [];	for(var i = 0; i < dataCount; i++){		vPointArray.push({			x: view.getFloat32(),			y: view.getFloat32(),			z: view.getFloat32()		});	}		chunkID = view.getString(20);	chunkID = chunkID.substring(0, chunkID.indexOf('\0'));	typeFlag = view.getInt32();	dataSize = view.getInt32();	dataCount = view.getInt32();		var vVertexArray = [];	for(var i = 0; i < dataCount; i++){		vVertexArray.push({			pointIndex: view.getUint16(),			pad: view.getUint16(),			u: view.getFloat32(),			v: view.getFloat32(),			matIndex: view.getUint8(),			reserved: view.getUint8(),			pad_v: view.getUint16(),		});	}		chunkID = view.getString(20);	chunkID = chunkID.substring(0, chunkID.indexOf('\0'));	typeFlag = view.getInt32();	dataSize = view.getInt32();	dataCount = view.getInt32();		var vTriangleArray = [];	for(var i = 0; i < dataCount; i++){		vTriangleArray.push({			wedgeIndex: [				view.getUint16(),				view.getUint16(),				view.getUint16()			],			matIndex: view.getUint8(),			auxMatIndex: view.getUint8(),			smoothingGroups: view.getUint32()		});	}		chunkID = view.getString(20);	chunkID = chunkID.substring(0, chunkID.indexOf('\0'));	typeFlag = view.getInt32();	dataSize = view.getInt32();	dataCount = view.getInt32();		var vMaterialArray = [];	for(var i = 0; i < dataCount; i++){		var name = view.getString(64);		name = name.substring(0, name.indexOf('\0'));		vMaterialArray.push({			materialName: name,			textureIndex: view.getInt32(),			polyFlags: view.getUint32(),			auxMaterial: view.getInt32(),			auxFlags: view.getUint32(),			lodBias: view.getInt32(),			lodStyle: view.getInt32()		});	}		chunkID = view.getString(20);	chunkID = chunkID.substring(0, chunkID.indexOf('\0'));	typeFlag = view.getInt32();	dataSize = view.getInt32();	dataCount = view.getInt32();		var vBonesArray = [];	for(var i = 0; i < dataCount; i++){		var name = view.getString(64);		name = name.substring(0, name.indexOf('\0'));		vBonesArray.push({			name: name,			flags: view.getUint32(),			numChildren: view.getInt32(),			parentIndex: view.getInt32(),			bonePos: {				orientation: {					x: view.getFloat32(),					y: view.getFloat32(),					z: view.getFloat32(),					w: view.getFloat32()				},				position: {					x: view.getFloat32(),					y: view.getFloat32(),					z: view.getFloat32()				},				length: view.getFloat32(),				xSize: view.getFloat32(),				ySize: view.getFloat32(),				zSize: view.getFloat32()			}		});	}		chunkID = view.getString(20);	chunkID = chunkID.substring(0, chunkID.indexOf('\0'));	typeFlag = view.getInt32();	dataSize = view.getInt32();	dataCount = view.getInt32();		var vRawBoneInfluenceArray = [];	for(var i = 0; i < dataCount; i++){		vRawBoneInfluenceArray.push({			weight: view.getFloat32(),			pointIndex: view.getInt32(),			boneIndex: view.getInt32()		});	}		var vertices = new Float32Array(vPointArray.length*3);	for(var i = 0; i < vPointArray.length; i++){		vertices[i*3] = vPointArray[i].x;		vertices[i*3+1] = vPointArray[i].z;		vertices[i*3+2] = vPointArray[i].y;	}		var texCoords = new Float32Array(vPointArray.length*2);	for(var i = 0; i < vVertexArray.length; i++){		texCoords[vVertexArray.pointIndex*2] = vVertexArray.u;		texCoords[vVertexArray.pointIndex*2+1] = vVertexArray.v;	}		var indices = new Uint16Array(vTriangleArray.length*3);	for(var i = 0; i < vTriangleArray.length; i++){		indices.set(vTriangleArray[i].wedgeIndex, i*3);	}		this.vertices = vertices;	this.texCoords = texCoords;	this.indices = indices;}